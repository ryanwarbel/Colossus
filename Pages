// /pages/api/command.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import { Configuration, OpenAIApi } from 'openai';

const config = new Configuration({
  apiKey: process.env.OPENAI_API_KEY, // Youâ€™ll set this in Vercel later
});

const openai = new OpenAIApi(config);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { command } = req.body;
  if (!command) {
    return res.status(400).json({ error: 'No command provided' });
  }

  try {
    const completion = await openai.createChatCompletion({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: 'You are Colossus, a highly intelligent assistant. Answer concisely and accurately.' },
        { role: 'user', content: command },
      ],
    });

    const result = completion.data.choices[0].message?.content ?? '[No response]';
    res.status(200).json({ result });
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch GPT response', details: err });
  }
}
